Microsoft (R) Macro Assembler Version 6.11		    09/19/24 17:00:50
src\221005009_P07.asm					     Page 1 - 1



				;	Author: B Bukanga
				;	Template document
				.386
				.MODEL FLAT ; Flat memory model
				.STACK 4096 ; 4096 bytes
				INCLUDE io.inc
			      C ;
			      C ; Simple I/O Routines - Version 2
			      C ;
			      C 
			      C IFNDEF IO_INC
 = 1			      C IO_INC equ <1>
			      C 
			      C OutputStr PROTO NEAR32 STDCALL :DWORD
			      C OutputInt PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat8 PROTO NEAR32 STDCALL :QWORD
			      C InputInt PROTO NEAR32 STDCALL
			      C InputStr PROTO NEAR32 STDCALL :DWORD, :DWORD
			      C 
			      C ELSE
			      C ENDIF
			      C 

				ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD

 00000000			.CODE
 00000000			replaceCharfunction PROC NEAR32
				; registers to backup
 00000000  55				PUSH ebp
 00000001  8B EC			MOV ebp, esp
 00000003  50				PUSH eax
 00000004  53				PUSH ebx
 00000005  51				PUSH ecx
 00000006  52				PUSH edx
 00000007  56				PUSH esi
 00000008  9C				PUSHFD
					
 00000009  8B 75 08			MOV esi, [ebp+8]		; String Parameter address
 0000000C  A0 00000021 R		MOV al, searchChar    	; Character searcgh
 00000011  8A 1D 00000023 R		MOV bl, replaceChar  	; char replace

 00000017			changeLoop:
 00000017  8A 16			MOV dl, BYTE PTR [esi] 
 00000019  80 FA 00			CMP dl, 0              
 0000001C  74 09			JE done                
 0000001E  38 C2			CMP dl, al             	; Compare character with searchChar
 00000020  75 02			JNE dontDisplayReplace       ; skip replacement if not equal
 00000022  88 1E			MOV BYTE PTR [esi], bl 	; Replace char

 00000024			dontDisplayReplace:
 00000024  46				INC esi                ; Move to the next character in the string
 00000025  EB F0			JMP changeLoop       ; Repeat the loop
 00000027				done:
					; restoring flag registers
 00000027  9D				POPFD
 00000028  5E				POP esi
 00000029  5A				POP edx
 0000002A  59				POP ecx
 0000002B  5B				POP ebx
 0000002C  58				POP eax
					; Destroying stack frame
 0000002D  8B E5			MOV esp, ebp
 0000002F  5D				POP ebp

 00000030  C2 0004			RET 4                  ; Clean up the stack and return (4 bytes - 1 parameter)
 00000033			replaceCharfunction ENDP

 00000033			functionToReverseString PROC NEAR32
				; Function setup
					; Create stack frame
 00000033  55				PUSH ebp
 00000034  8B EC			MOV ebp, esp

					; Backing up general registers
 00000036  50				PUSH eax
 00000037  53				PUSH ebx
 00000038  51				PUSH ecx
 00000039  52				PUSH edx
 0000003A  56				PUSH esi
 0000003B  57				PUSH edi
 0000003C  9C				PUSHFD
					
					; Load string memory address
 0000003D  8B 75 08			MOV esi, [ebp+8]
					; Finding null terminator
 00000040  8B FE			MOV edi, esi            ; Copy start address to EDI

 00000042			reverseEndSymbol:
 00000042  80 3F 00			CMP BYTE PTR [edi], 0 
 00000045  74 03			JE ReverseBeginning  ; swap for 0
 00000047  47				INC edi               
 00000048  EB F8			JMP reverseEndSymbol	; jump to function call

 0000004A			ReverseBeginning:
 0000004A  4F				DEC edi

 0000004B			swapReversed:
 0000004B  3B F7			CMP esi, edi        ; compare pointers
 0000004D  7D 0C			JGE complete       ; if statement
 0000004F  8A 06			MOV al, [esi]		; Swap the characters at ESI and EDI
 00000051  8A 1F			MOV bl, [edi]
 00000053  88 1E			MOV [esi], bl
 00000055  88 07			MOV [edi], al		; Move the pointers inward
 00000057  46				INC esi
 00000058  4F				DEC edi

 00000059  EB F0			JMP swapReversed	; call function

 0000005B			complete:
 0000005B  9D				POPFD
 0000005C  5F				POP edi
 0000005D  5E				POP esi
 0000005E  5A				POP edx
 0000005F  59				POP ecx
 00000060  5B				POP ebx
 00000061  58				POP eax
					; Destroying stack frame
 00000062  8B E5			MOV esp, ebp
 00000064  5D				POP ebp
					;
 00000065  C2 0004		    RET 4                      ; Return and clean up stack
 00000068			functionToReverseString ENDP

 00000068			_start:
 00000068			; Creating stack frame
 00000068  55				PUSH 	ebp
 00000069  8B EC			MOV		ebp, esp
				; Inputs
					INVOKE 	OutputStr, ADDR reqInput
src\221005009_P07.asm(114): error A2006: undefined symbol : reqInput
src\221005009_P07.asm(114): error A2114: INVOKE argument type mismatch : argument : 1
 00000070  6A 32			PUSH	50
 00000072  8D 1D 00000027 R		LEA		ebx, strInput
 00000078  53				PUSH	ebx
 00000079  E8 00000000 E		CALL	InputStr
				; replace characters
 0000007E  8D 05 00000027 R		LEA		eax, strInput
 00000084  50				PUSH	eax
 00000085  E8 FFFFFF76			CALL	replaceCharfunction
				; reversing characters
 0000008A  8D 05 00000027 R		LEA		eax, strInput
 00000090  50				PUSH	eax
 00000091  E8 FFFFFF9D			CALL	functionToReverseString
					; backing up value
 00000096  8B D8			MOV		ebx, eax
					; Output
					INVOKE	OutputStr, ADDR displayOutput
src\221005009_P07.asm(130): error A2006: undefined symbol : displayOutput
src\221005009_P07.asm(130): error A2114: INVOKE argument type mismatch : argument : 1
					INVOKE 	OutputStr, ebx
					INVOKE OutputStr, ADDR NL
src\221005009_P07.asm(132): error A2006: undefined symbol : NL
src\221005009_P07.asm(132): error A2114: INVOKE argument type mismatch : argument : 1
 000000A8  8B E5			MOV		esp, ebp
 000000AA  5D				POP		ebp
					INVOKE ExitProcess, 0
				Public _start

 000000B2 00000000		.DATA
 00000000 45 6E 74 65 72		reqInput			BYTE	"Enter string: ", 0
	   20 73 74 72 69
	   6E 67 3A 20 00
 0000000F 52 65 76 65 72		displayOutput		BYTE	"Reversed string: ", 0
	   73 65 64 20 73
	   74 72 69 6E 67
	   3A 20 00
 00000021 21 00				searchChar			BYTE	"!",0
 00000023 23 00				replaceChar			BYTE	"#",0
 00000025 0A 00				NL					BYTE	10, 0
 00000027  00000032 [			strInput			BYTE	50 DUP(0)
	    00
	   ]
					
				END
Microsoft (R) Macro Assembler Version 6.11		    09/19/24 17:00:50
src\221005009_P07.asm					     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000059 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000B2 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00003  . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 0000004A Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputStr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat8 . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputInt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputStr  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
functionToReverseString  . . . .	P Near	 00000033 _TEXT	Length= 00000035 Public
  reverseEndSymbol . . . . . . .	L Near	 00000042 _TEXT	
  ReverseBeginning . . . . . . .	L Near	 0000004A _TEXT	
  swapReversed . . . . . . . . .	L Near	 0000004B _TEXT	
  complete . . . . . . . . . . .	L Near	 0000005B _TEXT	
replaceCharfunction  . . . . . .	P Near	 00000000 _TEXT	Length= 00000033 Public
  changeLoop . . . . . . . . . .	L Near	 00000017 _TEXT	
  dontDisplayReplace . . . . . .	L Near	 00000024 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000027 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
IO_INC . . . . . . . . . . . . .	Text   	 1
NL . . . . . . . . . . . . . . .	Byte	 00000025 _DATA	
_start . . . . . . . . . . . . .	L Near	 00000068 _TEXT	Public
displayOutput  . . . . . . . . .	Byte	 0000000F _DATA	
replaceChar  . . . . . . . . . .	Byte	 00000023 _DATA	
reqInput . . . . . . . . . . . .	Byte	 00000000 _DATA	
searchChar . . . . . . . . . . .	Byte	 00000021 _DATA	
strInput . . . . . . . . . . . .	Byte	 00000027 _DATA	

	   0 Warnings
	   6 Errors
