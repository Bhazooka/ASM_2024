Microsoft (R) Macro Assembler Version 6.11		    09/23/24 20:52:18
src\temp.asm						     Page 1 - 1


				.386
				.MODEL flat
				.STACK 4096
				ExitProcess PROTO NEAR32 stdcall, dwExitCode : DWORD

 00000000			.DATA
 00000000 00000010		arrRef DWORD 10h, 20h, 30h, 40h ; Sample data in the array
	   00000020
	   00000030
	   00000040
 00000010 00000004		arrayLength DWORD 4 ; Number of elements in the array

 00000000			.CODE

				; -----------------------------------------------------------
				; geduf function: shifts each element in arrRef to the right by 4 bits
				; Parameters: 
				;   - ECX: array length
				;   - ESI: array address
				; -----------------------------------------------------------

 00000000			geduf PROC
				    ; Setup stack frame
 00000000  55			    PUSH EBP
 00000001  8B EC		    MOV EBP, ESP

				    ; Push registers and flags
 00000003  56			    PUSH ESI
 00000004  51			    PUSH ECX

				    ; ESI = address of array (arrRef)
				    ; ECX = number of elements (arrayLength)
 00000005  BE 00000000 R	    MOV ESI, OFFSET arrRef
 0000000A  8B 0D 00000010 R	    MOV ECX, arrayLength

				    ; Test loop condition using JECXZ
 00000010			    testLoop:
 00000010  83 F9 00		        CMP ECX, 0          ; Check if ECX (array length) is zero
 00000013  E3 0C		        JECXZ endLoop       ; If zero, exit the loop

				        ; Perform arithmetic right shift
 00000015  8B 06		        MOV EAX, [ESI]      ; Load current array element into EAX
 00000017  C1 F8 04		        SAR EAX, 4          ; Arithmetic right shift EAX by 4
 0000001A  89 06		        MOV [ESI], EAX      ; Store the shifted value back to memory

				        ; Loop increment
 0000001C  83 C6 04		        ADD ESI, 4          ; Move to the next array element (DWORD = 4 bytes)
 0000001F  E2 EF		        LOOP testLoop       ; Decrement ECX and jump to testLoop if ECX != 0

				    ; Exit code
 00000021			    endLoop:
 00000021  59			        POP ECX             ; Restore registers and flags
 00000022  5E			        POP ESI

				        ; Destroy stack frame
 00000023  8B E5		        MOV ESP, EBP
 00000025  5D			        POP EBP

				        ; Return
 00000026  C3			        RET
 00000027			geduf ENDP

 00000027			_start:
 00000027			    ; Call geduf function
 00000027  E8 FFFFFFD4		    CALL geduf

				    ; Exit the program
 0000002C  6A 00		    PUSH 0
 0000002E  E8 00000000 E	    CALL ExitProcess

 00000033			PUBLIC _start
				END _start
Microsoft (R) Macro Assembler Version 6.11		    09/23/24 20:52:18
src\temp.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000014 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000033 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00002  . . . . . . . . . .	P Near	 00000027 _TEXT	Length= 0000000C Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
geduf  . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000027 Public
  testLoop . . . . . . . . . . .	L Near	 00000010 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 00000021 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000027 _TEXT	Public
arrRef . . . . . . . . . . . . .	DWord	 00000000 _DATA	
arrayLength  . . . . . . . . . .	DWord	 00000010 _DATA	

	   0 Warnings
	   0 Errors
