Microsoft (R) Macro Assembler Version 6.11		    08/22/24 16:39:24
src\temp.asm						     Page 1 - 1


				;	Author: B Bukanga
				;	Template document
				.386
				.MODEL FLAT ; Flat memory model
				.STACK 4096 ; 4096 bytes
				INCLUDE io.inc
			      C ;
			      C ; Simple I/O Routines - Version 2
			      C ;
			      C 
			      C IFNDEF IO_INC
 = 1			      C IO_INC equ <1>
			      C 
			      C OutputStr PROTO NEAR32 STDCALL :DWORD
			      C OutputInt PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat8 PROTO NEAR32 STDCALL :QWORD
			      C InputInt PROTO NEAR32 STDCALL
			      C InputStr PROTO NEAR32 STDCALL :DWORD, :DWORD
			      C 
			      C ELSE
			      C ENDIF
			      C 

				ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD

				; The data section stores all global variables
 00000000			.DATA
					;global variables
 00000000  00000005 [			LevelArray		DWORD			 5 DUP (?)
	    00000000
	   ]
 00000014  00000005 [			DurationArray   DWORD            5 DUP (?)
	    00000000
	   ]
 00000028  00000005 [			ScoreArray      DWORD            5 DUP (?)
	    00000000
	   ]

					;user prompts
 0000003C 45 6E 74 65 72	    agePrompt       BYTE            "Enter age here (in years): ",0
	   20 61 67 65 20
	   68 65 72 65 20
	   28 69 6E 20 79
	   65 61 72 73 29
	   3A 20 00
 00000058 45 6E 74 65 72		HRFPrompt       BYTE            "Enter the HRF value here: ",0
	   20 74 68 65 20
	   48 52 46 20 76
	   61 6C 75 65 20
	   68 65 72 65 3A
	   20 00
 00000073 54 68 65 20 61		ageDisplay      BYTE            "The age is        : ",0
	   67 65 20 69 73
	   20 20 20 20 20
	   20 20 20 3A 20
	   00
 00000088 54 68 65 20 48		HRFDisplay      BYTE            "The HRF value is  : ",0
	   52 46 20 76 61
	   6C 75 65 20 69
	   73 20 20 3A 20
	   00
 0000009D 61 72 72 61 79		ArrayOutput     BYTE            "array is		: ",10,0
	   20 69 73 09 09
	   3A 20 0A 00
 000000AB 4C 65 76 65 6C		LevelArrayP     BYTE            "Level Array    : ",0
	   20 41 72 72 61
	   79 20 20 20 20
	   3A 20 00
 000000BD 44 75 72 61 74		arrDuration  	BYTE            "Duration Array : ",0
	   69 6F 6E 20 41
	   72 72 61 79 20
	   3A 20 00
 000000CF 53 63 6F 72 65		arrScore     	BYTE            "Score Array    : ",0
	   20 41 72 72 61
	   79 20 20 20 20
	   3A 20 00
 000000E1 3A 00				SemiColon		BYTE			":",0
 000000E3 0A 00				NewLine			BYTE			10,0
 000000E5 5B 00				OpenBracket	    BYTE			"[",0
 000000E7 5D 00				CloseBracket    BYTE			"]",0
 000000E9 2C 00				Comma    		BYTE			",",0
 000000EB 55 73 65 72 2C		ContinueCode    BYTE            "User, press 0 to exit or any number to resume:",0
	   20 70 72 65 73
	   73 20 30 20 74
	   6F 20 65 78 69
	   74 20 6F 72 20
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   20 74 6F 20 72
	   65 73 75 6D 65
	   3A 00
 0000011A 2A 0A 00			Separate        BYTE            "*",10,0


				; The code section may contain multiple tags such as _start, which is the entry
				; point of this assembly program
 00000000			.CODE
				    ;Functions are 

				   ;Input function 
 00000000			   InputFunc PROC NEAR32
					;Creating the stack frame
 00000000  55				push				ebp
 00000001  8B EC			mov					ebp,esp
					;Create space for local variables
					
					;Backup our existing registers
 00000003  50				push				eax					;Do not backup eax if this is a value returning function 
 00000004  53				push				ebx
 00000005  51				push				ecx
 00000006  52				push				edx
 00000007  9C				pushfd

 00000008  B9 00000000			mov					ecx,0				;int n=0
 0000000D			InputStart:
 0000000D  3B 4D 0C			cmp					ecx,[ebp+12]
 00000010  7D 30			jge					InputEnd			;n<10
					;This is what the macro INVOKE OutputStr, ADDR OutputStr
 00000012  8D 1D 00000058 R		lea					ebx,HRFPrompt
 00000018  53				push				ebx 
 00000019  E8 00000000 E		call				OutputStr
 0000001E  51				push				ecx 				;INVOKE OutputInt,ecx 
 0000001F  E8 00000000 E		call				OutputInt
 00000024  8D 1D 000000E1 R		lea					ebx,SemiColon
 0000002A  53				push				ebx 
 0000002B  E8 00000000 E		call				OutputStr
					
					;Calculate the address of the array[n]
 00000030  6B C1 04			imul				eax,ecx,4
 00000033  8B 5D 08			mov					ebx,DWORD PTR [ebp+8]
 00000036  03 D8			add					ebx,eax 			;The memory address of array[n]
 00000038  E8 00000000 E		call				InputInt
 0000003D  89 03			mov					[ebx],eax			;cin >> array[n]
					
 0000003F  41				inc					ecx					;n++ 
 00000040  EB CB			jmp					InputStart
 00000042			InputEnd:
					
					;Restore the registers to their original value
 00000042  9D				popfd
 00000043  5A				pop					edx
 00000044  59				pop					ecx
 00000045  5B				pop					ebx
 00000046  58				pop					eax					;Do not restore eax, if this is a value returning function.
					
					;Destroying the stack frame
 00000047  8B E5			mov					esp,ebp
 00000049  5D				pop					ebp
					;Return instruction
					;ret uses an operand indicating the number of PARAMETERS
 0000004A  C2 0008			ret					8
 0000004D			   InputFunc ENDP

				   ;_Display function 
 0000004D			   DisplayFunc PROC NEAR32
					;Creating the stack frame
 0000004D  55				push				ebp
 0000004E  8B EC			mov					ebp,esp
					;Create space for local variables
					
					;Backup our existing registers
 00000050  50				push				eax					;Do not backup eax if this is a value returning function 
 00000051  53				push				ebx
 00000052  51				push				ecx
 00000053  52				push				edx
 00000054  9C				pushfd

 00000055  8D 1D 000000E5 R		lea					ebx,OpenBracket
 0000005B  53				push				ebx 
 0000005C  E8 00000000 E		call				OutputStr

 00000061  B9 00000000			mov					ecx,0				;int n=0
 00000066			OuputStart:
 00000066  3B 4D 0C			cmp					ecx,[ebp+12]
 00000069  7D 27			jge					OuputEnd			;n<10
					
					;Calculate the address of the array[n]
 0000006B  6B C1 04			imul				eax,ecx,4
 0000006E  8B 5D 08			mov					ebx,DWORD PTR [ebp+8]
 00000071  03 D8			add					ebx,eax 			;The memory address of array[n]
 00000073  8B 03			mov					eax,[ebx]
 00000075  50				push				eax 
 00000076  E8 00000000 E		call				OutputInt
 0000007B  8B 45 0C			mov					eax,[ebp+12]
 0000007E  48				dec					eax
 0000007F  3B C8			cmp					ecx,eax 
 00000081  7D 0C			jge					Done_noComma
 00000083  8D 1D 000000E9 R		lea					ebx,Comma
 00000089  53				push				ebx 
 0000008A  E8 00000000 E		call				OutputStr
 0000008F			Done_noComma:
 0000008F  41				inc					ecx
 00000090  EB D4			jmp					OuputStart
 00000092			OuputEnd:
 00000092  8D 1D 000000E7 R	    lea					ebx,CloseBracket
 00000098  53				push				ebx 
 00000099  E8 00000000 E		call				OutputStr
					;Output a new line character
 0000009E  8D 1D 000000E3 R		lea					ebx,NewLine
 000000A4  53				push				ebx 
 000000A5  E8 00000000 E		call				OutputStr
					
					;Restore the registers to their original value
 000000AA  9D				popfd
 000000AB  5A				pop					edx
 000000AC  59				pop					ecx
 000000AD  5B				pop					ebx
 000000AE  58				pop					eax					;Do not restore eax, if this is a value returning function.
					
					;Destroying the stack frame
 000000AF  8B E5			mov					esp,ebp
 000000B1  5D				pop					ebp
					;Return instruction
					;ret uses an operand indicating the number of PARAMETERS
 000000B2  C2 0008			ret					8
 000000B5			DisplayFunc ENDP	

				   ;HealthScore function
				   ;inthealthScore(int age,intlevel,intduration,HRFPrompt)
 000000B5			HealthScoreFunc PROC NEAR32
					;Creating the stack frame
 000000B5  55				push				ebp
 000000B6  8B EC			mov					ebp,esp
 000000B8  83 EC 18    sub                 esp,24

					;Backup our existing registers
 000000BB  53				push				ebx
 000000BC  51				push				ecx
 000000BD  52				push				edx
 000000BE  9C				pushfd
					;This is the function code 
				     
				    ;Firstly accessing the elements of level and duration array...
 000000BF			_MultiplyingElements:
 000000BF  8B 55 0C			mov             edx, [ebp+12]
 000000C2  8B 45 10			mov             eax, [ebp+16]

					;Multiplying the entries here:
 000000C5  0F AF D0			imul            edx,eax
 000000C8  89 55 FC		    mov             [ebp-4], edx

				    ;Moving HRF in one of the registers for multiplication purposes:
 000000CB  8B 5D 14			mov             ebx,DWORD PTR[ebp+20]
 000000CE  0F AF D3		    imul            edx, ebx
 000000D1  89 55 F8			mov             [ebp-8]  ,edx

				    ;dealing with the denominator here
 000000D4  8B 45 08		     mov           eax, [ebp+8]
 000000D7  BB 0000000A			 mov           ebx, 10
 000000DC  99				 cdq
 000000DD  F7 F3			 div           ebx    
 000000DF  89 45 F4			 mov           [ebp-12],eax    ;storinng age/10 here
 000000E2  83 C0 05			 add            eax, 5
					
 000000E5  89 45 F0			mov             [ebp-16],eax
					
					;Dividing to get the HealthScore value here:
 000000E8  8B 45 F8			mov             eax, [ebp-8]
 000000EB  BA 00000000			mov				edx,0
 000000F0  8B 5D F0			mov             ebx, [ebp-16]
 000000F3  F7 F3			div             ebx

				;Restore the registers to their original value
 000000F5  9D				popfd
 000000F6  5A				pop					edx
 000000F7  59				pop					ecx
 000000F8  5B				pop					ebx
					
					;Destroying the stack frame
 000000F9  8B E5			mov					esp,ebp
 000000FB  5D				pop					ebp
					;Return instruction
					;ret uses an operand indicating the number of PARAMETERS
 000000FC  C2 0008			ret					8
 000000FF			HealthScoreFunc ENDP	

				   
 000000FF			_start:
 000000FF				;Main is here______________________________________________
				    ;Create the stack frame for local variables
 000000FF  55				push			          ebp
 00000100  8B EC			mov			              ebp,esp
 00000102  83 EC 14		    sub                       esp, 20
				    
					;Prompting the user here for the age and the hrf value:
					INVOKE                    OutputStr, ADDR agePrompt
					INVOKE                    InputInt
 00000114  89 45 FC			mov                       [ebp-4],eax
					INVOKE                    OutputStr, ADDR HRFPrompt
				    INVOKE                    InputInt
 00000126  89 45 F8			mov                       [ebp-8],eax

 00000129			TopOfMain:
					; input(&userArray,length);
					; Calling the input function for the level array 
					INVOKE              OutputStr, ADDR Separate
					INVOKE              OutputStr, ADDR LevelArrayP
					INVOKE              OutputStr, ADDR NewLine
 00000147  8D 1D 00000000 R		lea					ebx,LevelArray
 0000014D  B8 00000005			mov					eax,5 
 00000152  50				push				eax
 00000153  53				push				ebx 
 00000154  E8 FFFFFEA7			call				InputFunc

					; input(&userArray,length);
					; Calling the input function for the Duration array 
					INVOKE              OutputStr, ADDR Separate
					INVOKE              OutputStr, ADDR arrDuration
					INVOKE              OutputStr, ADDR NewLine
 00000177  8D 1D 00000014 R		lea					ebx,DurationArray
 0000017D  B8 00000005			mov					eax,5 
 00000182  50				push				eax
 00000183  53				push				ebx 
 00000184  E8 FFFFFE77			call				InputFunc
					
				    ;Displaying the age and the HRF using the normal integer output here:
					INVOKE              OutputStr, ADDR Separate
				    INVOKE              OutputStr, ADDR ageDisplay
				    INVOKE              OutputInt, DWORD PTR [ebp-4]
				    INVOKE              OutputStr, ADDR NewLine
				    INVOKE              OutputStr, ADDR HRFDisplay
					INVOKE              OutputInt, DWORD PTR [ebp-8]
				    INVOKE              OutputStr, ADDR NewLine

					; display(&userArray,length);
					; Displaying the Level Array
					INVOKE              OutputStr, ADDR LevelArrayP
 000001D5  8D 1D 00000000 R		lea					ebx,LevelArray
 000001DB  B8 00000005			mov					eax,5 
 000001E0  50				push				eax
 000001E1  53				push				ebx 
 000001E2  E8 FFFFFE66			call				DisplayFunc

					; display(&userArray,length);
					; Displaying the Duration Array
					INVOKE              OutputStr, ADDR arrDuration
 000001F1  8D 1D 00000014 R		lea					ebx,DurationArray
 000001F7  B8 00000005			mov					eax,5 
 000001FC  50				push				eax
 000001FD  53				push				ebx 
 000001FE  E8 FFFFFE4A			call				DisplayFunc


				;Placing the values inside of healthscore function
				 ;Firstly accessing the elements of level and duration array...
 00000203  B9 00000000		    mov             ecx, 0
 00000208			_AccessArraylements:
 00000208  83 F9 05		    cmp             ecx,5
 0000020B  74 4D			je              _DoneElements
 0000020D  8D 1D 00000000 R		lea				ebx,LevelArray 			   ;Making ebx to point to the HR array here
 00000213  6B C1 04			imul			eax,ecx,4                  ;EAX = ECX*4
 00000216  03 D8			add				ebx,eax                    ;EBX = EBX + EAX, to move to the correct index in the array   
 00000218  8B 13		    mov             edx,[ebx]
 0000021A  89 55 F4		    mov             [ebp-12], edx

 0000021D  8D 1D 00000014 R	    lea				ebx,DurationArray 		   ;Making ebx to point to the HR array here
 00000223  6B C1 04			imul			eax,ecx,4                  ;EAX = ECX*4
 00000226  03 D8			add				ebx,eax                    ;EBX = EBX + EAX, to move to the correct index in the array   
 00000228  8B 13			mov             edx,[ebx]
 0000022A  89 55 F0		    mov             [ebp-16], edx
				   
					; display(&userArray,length);
					; Displaying the Duration Array
 0000022D  89 4D EC			mov                 [ebp-20], ecx
 00000230  8B 4D FC			mov					ecx,[ebp-4]  
 00000233  8B 5D F4			mov					ebx,[ebp-12]           ;Moving the level array value here
 00000236  8B 55 F0			mov                 edx,[ebp-16]           ;Moving the Duration array value here
 00000239  8B 45 F8			mov					eax,[ebp-8]
 0000023C  50				push				eax
 0000023D  53				push				ebx 
 0000023E  52				push                edx
 0000023F  51				push                ecx
 00000240  E8 FFFFFE70			call				HealthScoreFunc
 00000245  8B D0			mov                 edx, eax
 00000247  8B 4D EC			mov                 ecx, [ebp-20]
					;Storing the values from healthScore function to the score array
 0000024A  8D 1D 00000028 R	    lea				ebx,ScoreArray 			   ;Making ebx to point to the HR array here
 00000250  6B C1 04			imul			eax,ecx,4                  ;EAX = ECX*4
 00000253  03 D8			add				ebx,eax                    ;EBX = EBX + EAX, to move to the correct index in the array   
 00000255  89 13		    mov             [ebx], edx
 00000257  41				inc             ecx
 00000258  EB AE			jmp                  _AccessArraylements
 0000025A				_DoneElements:
				   
				    ;; display(&userArray,length);
					; Displaying the Score Array
					INVOKE              OutputStr, ADDR arrDuration
 00000264  8D 1D 00000028 R		lea					ebx,ScoreArray
 0000026A  B8 00000005			mov					eax,5 
 0000026F  50				push				eax
 00000270  53				push				ebx 
 00000271  E8 FFFFFDD7			call				DisplayFunc
				    INVOKE              OutputStr, ADDR Separate  
					;Handling the events when the user needs to exit the code here:
					INVOKE              OutputStr, ADDR ContinueCode
					INVOKE              InputInt
 0000028F  83 F8 00			cmp                 eax, 0
 00000292  74 05		    je                  _DoneHere
 00000294  E9 FFFFFE66		    jmp                 _start
 00000299			_DoneHere:
					INVOKE ExitProcess, 0
 000002A0			Public _start
				END
Microsoft (R) Macro Assembler Version 6.11		    08/22/24 16:39:24
src\temp.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000011D DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A0 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00004  . . . . . . . . . .	P Near	 000000FF _TEXT	Length= 000001A1 Private
  TopOfMain  . . . . . . . . . .	L Near	 00000129 _TEXT	
  _AccessArraylements  . . . . .	L Near	 00000208 _TEXT	
  _DoneElements  . . . . . . . .	L Near	 0000025A _TEXT	
  _DoneHere  . . . . . . . . . .	L Near	 00000299 _TEXT	
DisplayFunc  . . . . . . . . . .	P Near	 0000004D _TEXT	Length= 00000068 Public
  OuputStart . . . . . . . . . .	L Near	 00000066 _TEXT	
  Done_noComma . . . . . . . . .	L Near	 0000008F _TEXT	
  OuputEnd . . . . . . . . . . .	L Near	 00000092 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HealthScoreFunc  . . . . . . . .	P Near	 000000B5 _TEXT	Length= 0000004A Public
  _MultiplyingElements . . . . .	L Near	 000000BF _TEXT	
InputFunc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004D Public
  InputStart . . . . . . . . . .	L Near	 0000000D _TEXT	
  InputEnd . . . . . . . . . . .	L Near	 00000042 _TEXT	
InputInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputStr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat8 . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputInt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputStr  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ArrayOutput  . . . . . . . . . .	Byte	 0000009D _DATA	
CloseBracket . . . . . . . . . .	Byte	 000000E7 _DATA	
Comma  . . . . . . . . . . . . .	Byte	 000000E9 _DATA	
ContinueCode . . . . . . . . . .	Byte	 000000EB _DATA	
DurationArray  . . . . . . . . .	DWord	 00000014 _DATA	
HRFDisplay . . . . . . . . . . .	Byte	 00000088 _DATA	
HRFPrompt  . . . . . . . . . . .	Byte	 00000058 _DATA	
IO_INC . . . . . . . . . . . . .	Text   	 1
LevelArrayP  . . . . . . . . . .	Byte	 000000AB _DATA	
LevelArray . . . . . . . . . . .	DWord	 00000000 _DATA	
NewLine  . . . . . . . . . . . .	Byte	 000000E3 _DATA	
OpenBracket  . . . . . . . . . .	Byte	 000000E5 _DATA	
ScoreArray . . . . . . . . . . .	DWord	 00000028 _DATA	
SemiColon  . . . . . . . . . . .	Byte	 000000E1 _DATA	
Separate . . . . . . . . . . . .	Byte	 0000011A _DATA	
TopOfMain  . . . . . . . . . . .	L Near	 00000129 _TEXT	
_AccessArraylements  . . . . . .	L Near	 00000208 _TEXT	
_DoneElements  . . . . . . . . .	L Near	 0000025A _TEXT	
_DoneHere  . . . . . . . . . . .	L Near	 00000299 _TEXT	
_start . . . . . . . . . . . . .	L Near	 000000FF _TEXT	Public
ageDisplay . . . . . . . . . . .	Byte	 00000073 _DATA	
agePrompt  . . . . . . . . . . .	Byte	 0000003C _DATA	
arrDuration  . . . . . . . . . .	Byte	 000000BD _DATA	
arrScore . . . . . . . . . . . .	Byte	 000000CF _DATA	

	   0 Warnings
	   0 Errors
